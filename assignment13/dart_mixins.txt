mixin Logger {
  void log(String message) {
    print('Log: $message');
  }
}

class Service with Logger {
  void performAction() {
    log('Action performed');
  }
}

void main() {
  var service = Service();
  service.performAction(); // Output: Log: Action performed
}


mixin A {
  void a() => print("A");
}

mixin B {
  void b() => print("B");
}

class MyClass with A, B {}

void main() {
  MyClass c = MyClass();
  c.a(); // A
  c.b(); // B
}


 abstract class Animal {
  void eat() => print("Eating");
}

mixin CanRun on Animal {
  void run() {
    eat(); // Can call eat because of the `on Animal` constraint
    print("Running");
  }
}


class Dog extends Animal with CanRun {}

void main() {
  Dog dog = Dog();
  dog.run(); 
}
